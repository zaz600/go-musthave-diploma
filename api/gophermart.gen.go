// Package Gophermart provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Gophermart

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for OrderStatus.
const (
	OrderStatusINVALID OrderStatus = "INVALID"

	OrderStatusNEW OrderStatus = "NEW"

	OrderStatusPROCESSED OrderStatus = "PROCESSED"

	OrderStatusPROCESSING OrderStatus = "PROCESSING"
)

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// Order defines model for Order.
type Order struct {
	// Начисленные баллы. Может быть 0 или отсутствовать
	Accrual *int `json:"accrual,omitempty"`

	// Номер заказа
	Number string `json:"number"`

	// Статус обработки заказа
	Status OrderStatus `json:"status"`

	// Время загрузки заказа
	UploadedAt string `json:"uploaded_at"`
}

// Статус обработки заказа
type OrderStatus string

// OrdersResponse defines model for OrdersResponse.
type OrdersResponse []Order

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// UserLoginJSONBody defines parameters for UserLogin.
type UserLoginJSONBody LoginRequest

// UserRegisterJSONBody defines parameters for UserRegister.
type UserRegisterJSONBody RegisterRequest

// UserLoginJSONRequestBody defines body for UserLogin for application/json ContentType.
type UserLoginJSONRequestBody UserLoginJSONBody

// UserRegisterJSONRequestBody defines body for UserRegister for application/json ContentType.
type UserRegisterJSONRequestBody UserRegisterJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Аутентификация пользователя
	// (POST /api/user/login)
	UserLogin(w http.ResponseWriter, r *http.Request)
	// Получение списка загруженных номеров заказов
	// (GET /api/user/orders)
	GetUserOrders(w http.ResponseWriter, r *http.Request)
	// Загрузка номера заказа
	// (POST /api/user/orders)
	UploadOrder(w http.ResponseWriter, r *http.Request)
	// Регистрация пользователя в программе лояльности
	// (POST /api/user/register)
	UserRegister(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// UserLogin operation middleware
func (siw *ServerInterfaceWrapper) UserLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserLogin(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUserOrders operation middleware
func (siw *ServerInterfaceWrapper) GetUserOrders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserOrders(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UploadOrder operation middleware
func (siw *ServerInterfaceWrapper) UploadOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadOrder(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserRegister operation middleware
func (siw *ServerInterfaceWrapper) UserRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserRegister(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/login", wrapper.UserLogin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/orders", wrapper.GetUserOrders)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/orders", wrapper.UploadOrder)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/register", wrapper.UserRegister)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXy27bRhT9FWLaXRWJou0m5qqPBIEBIymcPhapUTDSxGYqkcxw5MQIDMiy0wRwChfp",
	"Ios2SIv+AP1QzEQW8wt3/qi4dyiJoijbSSu0G1s0PTNnzj333KNHrOY3A9/jngyZ/YiFtXXedOjjsr/m",
	"eiv8fouHEp8D4QdcSJfT2wa+xQ9yM+DMZqEUrrfGtkoscMLwgS/qBS+3Skzw+y1X8Dqzb6d7ZFaslgYr",
	"/Dv3eE3idjdFnYvJ851aTbScBn6s87Am3EC6vsdsBi8hUk8gVtvQgy70oa/2oGvAAUTQg57aKxvwOyTw",
	"GrqqY8CB2lMd9cwwDYihB7EBieqobbVDPztwCAkcQoT/w0qMP3SaQYMze8E0S6zpem6z1WS2OcTtepKv",
	"cYHAvVbzjkY+ATCBU+iqtgEnEMFbiPB3dne2aF2+smjNzV82WWmS4VA6shUW7Pyn6hDUHbVtQAIHqg0R",
	"HOCN4C1eLXech9hvsxvXvmMl9tXKzS+v3bq1dOM6K7GlG99+vrx0dfTna1exOCOAes0EslbQ8J06r//g",
	"yAJ4z1UbunCq9jWSI9VWO3BSCG14kGVa5qWqdalqfl1dsKuWbVY/Medss4CYnLpS/od0jaObKrVwhYeB",
	"74UcL+BK3iSiPxb8LrPZR5VRu1TSXqlohW4NN3SEcDbxeYWvuaHk4r9uIlziend92syVxOt1P1jnoukI",
	"aSz7m05Dbhq3uNhwa5yV2AYXoa5ZtWwiHD/gnhO4zGZzZbNs0XFyne5QcQK30gq5qAxvE/hhUfl/wabC",
	"llQdiNUuxFhw9RPEKIh3qg0JxHBCHXcMMfUfvoAEf0SoHQN6kMARxNCvpH9LoEedibQ6eNJSndnsm5CL",
	"5ZQYodn/wq9vIqia70nuET4nCBpujVZV7oU+YR8qb1gdhpe76/tZjm0WfBY+MOtUdq2D81QyZqdUkhw9",
	"r+g+EVlDR7XVngHH0EMKIjhUHUhUm/ghyiBmWRlI0eKkCy1dKoxlmgVFeKUZg5OBr0EXnw30DHgHXfUU",
	"+sh4lC8WFaqtV0Ef7z1feMBL6MIhuhsZ7xtD7RLyUzxLtzmVWm1DpDepnr0JRFoFRM5UAWyV2EIhnOfQ",
	"Jy9vp7NgH3dL1FOI4QD1Z6htOkefFlF7ha1m0xGb52u2kMt9dCZnLcTmhD+gi3BxlOD2g5VxAcGjndkq",
	"ohg1lk++hJdb4yTccbFf5xL1rt2LFavgHNVfTMI5fywS8V8ZFVHh8lMoKtCAZc4XawAVc4xyQy2px8OG",
	"SGgwd3HaTdfQNKVDH41kvKcyqp6JjDSWHfWElsfQNYgnDClDSvQ4fD3ILHjd/iApIMDsjEzgMKuyF4MX",
	"ao+t4vRIDThnijT+9LQ6yxYlfygrQcNxc9KY5DfNWMfjDCNsEvwzg/S8i0ln3N/T/4I3VFJsZ7WXHftV",
	"a25+4dPLVxbNucloVSC74khlIGm/QqJ2icNT8ou3pJvuB9rnlIN04ShNQm+inIb6GZscTqdYBoYi3QfW",
	"lCMPyUpHeshd8x3JGFXZoTvnmk7tzNiuz2m1i4ySxX+NbDimh6MLED5vWe9Nyagno/HUOivveDEWlaMz",
	"EEx1hLFpItJUekZSG7Z2LhYgGe3JiYbjLO1vta0eD/Lb0GQ1dRCj/WnHo1TzAaPVoC0QwolR8/0fXV7+",
	"3itMf4Ps/f8JgPlvA++VAYtpn3EGPNGpO3Nupm2LQ8zMUmKRP/w2yIJDS8CFZIMz68YpgW6aXtGNdWsc",
	"pYU9Tb/GqP3srKRa/vPUiFi52KC0ePsRa4kGs9m6lEFoV9AByvptWfJQVjaqbGt16+8AAAD///pDArAC",
	"EgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
