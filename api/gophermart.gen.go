// Package Gophermart provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Gophermart

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// PostApiUserLoginJSONBody defines parameters for PostApiUserLogin.
type PostApiUserLoginJSONBody LoginRequest

// PostApiUserRegisterJSONBody defines parameters for PostApiUserRegister.
type PostApiUserRegisterJSONBody RegisterRequest

// PostApiUserLoginJSONRequestBody defines body for PostApiUserLogin for application/json ContentType.
type PostApiUserLoginJSONRequestBody PostApiUserLoginJSONBody

// PostApiUserRegisterJSONRequestBody defines body for PostApiUserRegister for application/json ContentType.
type PostApiUserRegisterJSONRequestBody PostApiUserRegisterJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Аутентификация пользователя
	// (POST /api/user/login)
	PostApiUserLogin(w http.ResponseWriter, r *http.Request)
	// Загрузка номера заказа
	// (POST /api/user/orders)
	PostApiUserOrders(w http.ResponseWriter, r *http.Request)
	// Регистрация пользователя в программе лояльности
	// (POST /api/user/register)
	PostApiUserRegister(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// PostApiUserLogin operation middleware
func (siw *ServerInterfaceWrapper) PostApiUserLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiUserLogin(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostApiUserOrders operation middleware
func (siw *ServerInterfaceWrapper) PostApiUserOrders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiUserOrders(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostApiUserRegister operation middleware
func (siw *ServerInterfaceWrapper) PostApiUserRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiUserRegister(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/login", wrapper.PostApiUserLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/orders", wrapper.PostApiUserOrders)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/register", wrapper.PostApiUserRegister)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RWT2/jRBT/KtbAMYrTtAusT8AFIVUCLeK09GCSaesl8XhnJt2tqkpOWmClFgXBYQ9o",
	"tXwEN62Jt4ndr/DeN0JvnLjZrB1aINpL63g878/v/d7vvSPWEt1A+NzXijlHTLX2edc1j9tiz/Mf8ac9",
	"rjT9DqQIuNQeN6cdOqUHfRhw5jClpefvseMaC1ylngnZLjk8rjHJn/Y8ydvMeTyzsXBjpza/Ib5/wlua",
	"zD3ie57SXL7vSOiK5+8KY8zTHTr7QgT7XHZdqa1tceh29KH1DZcHXouzGjvgUnnCZw7bqDcoHBFw3w08",
	"5rDNeqPeNO70vsnBdgPP7iku7SKbQOTJtrlqSS/QuSn4FU9wADGkOIAETyGBa4jwJ0hwaMENhpBBAmMY",
	"QQZXkOAA++YAMvoTYQixBRPI4BISSO3ZuwwmeM5MhNIlT1+2mcO+Fkp/FnjfKi63Z/jIvAifi/YhxdYS",
	"vua+CdMNgo7XMpftJ0r4t2Sipw8l32UO+8C+ZZs9o5r9Fs8MzEspvzYxRjCFGAcY4pkFVzChtCIY4QAy",
	"DE3OBgZI2GJptexxU2sVCF/lhGk2GiXAvs5RgDFkMILIgDzBcwtPsA83EOMLSAnFaLkABvwwvwUpFXqr",
	"1MEriGEEMYaQ4hm8sfDURD4lXxaFn5cP+xDlRjZWG4Eor6wBp7KoxzX2oDSc3yClTIgRkEKKQ7KW4QtI",
	"4II4ZWHf+Mm9RaZlVK/bdeXhP/OwFMshqzHt7ilqOPgTYgoX+yaE4mZSAvCtZbZDUdw2i5BtLtVit1Qy",
	"+Kv801UU1vy5toOO6y2R912iYB8mEMPV21Qhfph8zi0T7imGyy05+wreGApTtfCM1Rh/7nYDUpSN5ubW",
	"g48+/uRhY7MQIM/XfI/L0tZ4BZlpizAn0DVE9N+CkQW/Q4anpnZTQ4dr6h6I/2V3VDjCE/iLFOUCz2CS",
	"H11imL+F1MJfqIYwrWAExDAlgjYbzQqXI9MpBrKyNG9M5xN3BybnDC6MUlxAhgO4xpM1d2OVZkBKoNxJ",
	"KR7+b2DDlflxeQfAt5rNe0NS1ICAXwhrbQrzsshvbL6ujmBBVl7OX+PZsljI2SKxYrgWrb2k+gRG+K5g",
	"kVrN+hv7+ON85BZzKYcOEvwZYuwbGRuu1LdK5bSMCQphbLWE+MHj9e/8VQN7vjXde2YXUlQsVozQ2xVi",
	"cT1yWPCpetZoS6r+3cb88h53r0lfjv6aJ/0435cW/C50b/moWtsuUCYTf8wnfqEMdNGo4dqasmJsV9GW",
	"RDnvkMtZYaezBRSHiyPT1PK/7wYUK5cHZid4fMR6ssMctq91oBybhKCen9Y1V9o+2GDHO8d/BwAA///R",
	"lNh1AQ0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
