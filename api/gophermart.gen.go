// Package Gophermart provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Gophermart

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for OrderStatus.
const (
	OrderStatusINVALID OrderStatus = "INVALID"

	OrderStatusNEW OrderStatus = "NEW"

	OrderStatusPROCESSED OrderStatus = "PROCESSED"

	OrderStatusPROCESSING OrderStatus = "PROCESSING"
)

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// Order defines model for Order.
type Order struct {
	// Начисленные баллы. Может быть 0 или отсутствовать
	Accrual *int `json:"accrual,omitempty"`

	// Номер заказа
	Number string `json:"number"`

	// Статус обработки заказа
	Status OrderStatus `json:"status"`

	// Время загрузки заказа
	UploadedAt string `json:"uploaded_at"`
}

// Статус обработки заказа
type OrderStatus string

// OrdersResponse defines model for OrdersResponse.
type OrdersResponse []Order

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// UserBalanceResponse defines model for UserBalanceResponse.
type UserBalanceResponse struct {
	Current   float32 `json:"current"`
	Withdrawn float32 `json:"withdrawn"`
}

// UserBalanceWithdrawRequest defines model for UserBalanceWithdrawRequest.
type UserBalanceWithdrawRequest struct {
	Order *string  `json:"order,omitempty"`
	Sun   *float32 `json:"sun,omitempty"`
}

// UserBalanceWithdrawJSONBody defines parameters for UserBalanceWithdraw.
type UserBalanceWithdrawJSONBody UserBalanceWithdrawRequest

// UserLoginJSONBody defines parameters for UserLogin.
type UserLoginJSONBody LoginRequest

// UserRegisterJSONBody defines parameters for UserRegister.
type UserRegisterJSONBody RegisterRequest

// UserBalanceWithdrawJSONRequestBody defines body for UserBalanceWithdraw for application/json ContentType.
type UserBalanceWithdrawJSONRequestBody UserBalanceWithdrawJSONBody

// UserLoginJSONRequestBody defines body for UserLogin for application/json ContentType.
type UserLoginJSONRequestBody UserLoginJSONBody

// UserRegisterJSONRequestBody defines body for UserRegister for application/json ContentType.
type UserRegisterJSONRequestBody UserRegisterJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение текущего баланса пользователя
	// (GET /api/user/balance)
	GetUserBalance(w http.ResponseWriter, r *http.Request)
	// Запрос на списание средств
	// (POST /api/user/balance/withdraw)
	UserBalanceWithdraw(w http.ResponseWriter, r *http.Request)
	// Получение информации о выводе средств
	// (GET /api/user/balance/withdrawals)
	UserBalanceWithdrawals(w http.ResponseWriter, r *http.Request)
	// Аутентификация пользователя
	// (POST /api/user/login)
	UserLogin(w http.ResponseWriter, r *http.Request)
	// Получение списка загруженных номеров заказов
	// (GET /api/user/orders)
	GetUserOrders(w http.ResponseWriter, r *http.Request)
	// Загрузка номера заказа
	// (POST /api/user/orders)
	UploadOrder(w http.ResponseWriter, r *http.Request)
	// Регистрация пользователя в программе лояльности
	// (POST /api/user/register)
	UserRegister(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetUserBalance operation middleware
func (siw *ServerInterfaceWrapper) GetUserBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserBalance(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserBalanceWithdraw operation middleware
func (siw *ServerInterfaceWrapper) UserBalanceWithdraw(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserBalanceWithdraw(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserBalanceWithdrawals operation middleware
func (siw *ServerInterfaceWrapper) UserBalanceWithdrawals(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserBalanceWithdrawals(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserLogin operation middleware
func (siw *ServerInterfaceWrapper) UserLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserLogin(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetUserOrders operation middleware
func (siw *ServerInterfaceWrapper) GetUserOrders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserOrders(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UploadOrder operation middleware
func (siw *ServerInterfaceWrapper) UploadOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadOrder(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserRegister operation middleware
func (siw *ServerInterfaceWrapper) UserRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserRegister(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/balance", wrapper.GetUserBalance)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/balance/withdraw", wrapper.UserBalanceWithdraw)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/balance/withdrawals", wrapper.UserBalanceWithdrawals)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/login", wrapper.UserLogin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/user/orders", wrapper.GetUserOrders)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/orders", wrapper.UploadOrder)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/user/register", wrapper.UserRegister)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"658AAAD//2EUV0bqGQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
